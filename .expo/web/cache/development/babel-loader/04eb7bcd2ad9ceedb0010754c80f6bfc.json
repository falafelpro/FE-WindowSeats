{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { makeAutoObservable } from \"mobx\";\nimport { baseURL, instance } from \"./instance\";\n\nvar ProfileStore = function ProfileStore() {\n  var _this = this;\n\n  _classCallCheck(this, ProfileStore);\n\n  this.profiles = [];\n  this.isLoading = true;\n\n  this.fetchProfiles = function _callee() {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(instance.get(\"/profiles\"));\n\n          case 3:\n            res = _context.sent;\n            _this.profiles = res.data;\n            _this.isLoading = false;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  this.updateProfiles = function _callee2(updatedProfile, profile) {\n    var formData, key, res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            formData = new FormData();\n\n            for (key in updatedProfile) {\n              formData.append(key, updatedProfile[key]);\n            }\n\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(instance.put(\"/profiles/\" + profile));\n\n          case 5:\n            res = _context2.sent;\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"ProfileStore -> updateProfile -> error\", _context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  makeAutoObservable(this);\n};\n\nvar profileStore = new ProfileStore();\nprofileStore.fetchProfiles();\nexport default profileStore;","map":{"version":3,"sources":["C:/Users/hussa/Development/ReactNative/FE-WindowSeats/Stores/profileStore.js"],"names":["makeAutoObservable","baseURL","instance","ProfileStore","profiles","isLoading","fetchProfiles","get","res","data","console","log","updateProfiles","updatedProfile","profile","formData","FormData","key","append","put","profileStore"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,OAAT,EAAkBC,QAAlB;;IAEMC,Y,GACJ,wBAAc;AAAA;;AAAA;;AAAA,OAIdC,QAJc,GAIH,EAJG;AAAA,OAMdC,SANc,GAMF,IANE;;AAAA,OAQdC,aARc,GAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEMJ,QAAQ,CAACK,GAAT,CAAa,WAAb,CAFN;;AAAA;AAENC,YAAAA,GAFM;AAGZ,YAAA,KAAI,CAACJ,QAAL,GAAgBI,GAAG,CAACC,IAApB;AACA,YAAA,KAAI,CAACJ,SAAL,GAAiB,KAAjB;AAJY;AAAA;;AAAA;AAAA;AAAA;AAMZK,YAAAA,OAAO,CAACC,GAAR;;AANY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GARF;;AAAA,OAkBdC,cAlBc,GAkBG,kBAAOC,cAAP,EAAuBC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,YAAAA,QAFO,GAEI,IAAIC,QAAJ,EAFJ;;AAGb,iBAAWC,GAAX,IAAkBJ,cAAlB;AACEE,cAAAA,QAAQ,CAACG,MAAT,CAAgBD,GAAhB,EAAqBJ,cAAc,CAACI,GAAD,CAAnC;AADF;;AAHa;AAAA,6CAKKf,QAAQ,CAACiB,GAAT,gBAA0BL,OAA1B,CALL;;AAAA;AAKPN,YAAAA,GALO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAObE,YAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAlBH;;AACZX,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,C;;AA4BH,IAAMoB,YAAY,GAAG,IAAIjB,YAAJ,EAArB;AACAiB,YAAY,CAACd,aAAb;AAEA,eAAec,YAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { baseURL, instance } from \"./instance\";\r\n\r\nclass ProfileStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  profiles = [];\r\n\r\n  isLoading = true;\r\n\r\n  fetchProfiles = async () => {\r\n    try {\r\n      const res = await instance.get(\"/profiles\");\r\n      this.profiles = res.data;\r\n      this.isLoading = false;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  updateProfiles = async (updatedProfile, profile) => {\r\n    try {\r\n      const formData = new FormData();\r\n      for (const key in updatedProfile)\r\n        formData.append(key, updatedProfile[key]);\r\n      const res = await instance.put(`/profiles/${profile}`);\r\n    } catch (error) {\r\n      console.log(\"ProfileStore -> updateProfile -> error\", error);\r\n    }\r\n  };\r\n}\r\n\r\nconst profileStore = new ProfileStore();\r\nprofileStore.fetchProfiles();\r\n\r\nexport default profileStore;\r\n"]},"metadata":{},"sourceType":"module"}